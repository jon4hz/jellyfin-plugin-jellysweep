name: 'Build and Release Plugin'

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      package-name: ${{ steps.get-version.outputs.package-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          global-json-file: './global.json'

      - name: Get Version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package-name=jellyfin-plugin-jellysweep-$VERSION.zip" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Update Version
        run: |
          cd build
          ./update-version.sh "${{ steps.get-version.outputs.version }}"

      - name: Build Plugin
        run: |
          cd build
          ./build.sh --configuration Release --package

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package
          path: bin/${{ steps.get-version.outputs.package-name }}
          retention-days: 30

      - name: Upload Plugin Files
        uses: actions/upload-artifact@v4
        with:
          name: plugin-files
          path: bin/plugin/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: plugin-package
          path: ./artifacts

      - name: Generate Release Notes
        id: generate-notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, generating notes from all commits"
            COMMITS=$(git log --pretty=format:"- %s" --reverse)
          else
            echo "Generating notes from $PREV_TAG to HEAD"
            COMMITS=$(git log --pretty=format:"- %s" --reverse "$PREV_TAG"..HEAD)
          fi

          # Filter conventional commits and categorize them
          FEATURES=""
          FIXES=""
          BREAKING=""
          OTHER=""

          while IFS= read -r commit; do
            if [[ $commit =~ ^-[[:space:]]*feat(\(.+\))?!: ]]; then
              BREAKING="$BREAKING$commit"$'\n'
            elif [[ $commit =~ ^-[[:space:]]*feat(\(.+\))?: ]]; then
              FEATURES="$FEATURES$commit"$'\n'
            elif [[ $commit =~ ^-[[:space:]]*fix(\(.+\))?: ]]; then
              FIXES="$FIXES$commit"$'\n'
            elif [[ $commit =~ ^-[[:space:]]*[a-zA-Z]+(\(.+\))?!: ]]; then
              BREAKING="$BREAKING$commit"$'\n'
            else
              OTHER="$OTHER$commit"$'\n'
            fi
          done <<< "$COMMITS"

          # Build release notes
          RELEASE_NOTES=""

          if [ -n "$BREAKING" ]; then
            RELEASE_NOTES="$RELEASE_NOTES## 💥 Breaking Changes"$'\n\n'"$BREAKING"$'\n'
          fi

          if [ -n "$FEATURES" ]; then
            RELEASE_NOTES="$RELEASE_NOTES## 🚀 Features"$'\n\n'"$FEATURES"$'\n'
          fi

          if [ -n "$FIXES" ]; then
            RELEASE_NOTES="$RELEASE_NOTES## 🐛 Bug Fixes"$'\n\n'"$FIXES"$'\n'
          fi

          if [ -n "$OTHER" ]; then
            RELEASE_NOTES="$RELEASE_NOTES## 📝 Other Changes"$'\n\n'"$OTHER"$'\n'
          fi

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## Changes"$'\n\n'"- Initial release"$'\n'
          fi

          # Add installation instructions
          RELEASE_NOTES="$RELEASE_NOTES"$'\n'"## 📦 Installation"$'\n\n'
          RELEASE_NOTES="$RELEASE_NOTES"$'1. Download the package file\n'
          RELEASE_NOTES="$RELEASE_NOTES"$'2. Extract to your Jellyfin plugins directory\n'
          RELEASE_NOTES="$RELEASE_NOTES"$'3. Restart Jellyfin\n'
          RELEASE_NOTES="$RELEASE_NOTES"$'4. Enable the plugin in admin dashboard\n\n'

          # Add checksums
          PACKAGE_PATH="./artifacts/${{ needs.build.outputs.package-name }}"
          if [ -f "$PACKAGE_PATH" ]; then
            CHECKSUM=$(sha256sum "$PACKAGE_PATH" | cut -d' ' -f1)
            RELEASE_NOTES="$RELEASE_NOTES"$'## 🔒 Checksums\n\n'
            RELEASE_NOTES="$RELEASE_NOTES"$'**SHA256:** `'"$CHECKSUM"$'`\n'
          fi

          echo "Generated release notes:"
          echo "$RELEASE_NOTES"

          # Save to file for use in release
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: 'Release v${{ needs.build.outputs.version }}'
          body_path: release_notes.md
          files: ./artifacts/${{ needs.build.outputs.package-name }}
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Plugin Manifest
        run: |
          # This could be used to update a plugin manifest repository
          # For now, we'll just output the information needed
          echo "Plugin Information:"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Package: ${{ needs.build.outputs.package-name }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          VERSION="v${{ needs.build.outputs.version }}"
          PACKAGE="${{ needs.build.outputs.package-name }}"
          echo "Download URL: ${REPO_URL}/releases/download/${VERSION}/${PACKAGE}"
